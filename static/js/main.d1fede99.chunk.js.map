{"version":3,"sources":["shared/layout/Header.tsx","modules/home/Home.tsx","modules/chat/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","title","AppBar","position","color","Toolbar","Typography","variant","projectListStyle","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","Home","description","classes","Container","fixed","Alert","severity","className","Grid","container","item","xs","Paper","elevation","Button","to","Chat","socket","socketIOClient","onSubmit","bind","state","chatHistory","count","userId","Math","floor","random","console","log","this","on","data","push","id","message","sent","setState","values","mr","ch","moment","emit","key","style","marginBottom","backgroundColor","wrap","paddingTop","paddingBottom","align","format","marginTop","map","decideUI","width","initialValues","render","handleSubmit","submitting","form","pristine","name","component","type","messageFieldProps","TextField","label","fullWidth","input","onChange","height","disabled","Component","App","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1fede99.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nexport interface IHeaderProps {\n  title: string;\n}\n\nconst Header = (props: IHeaderProps) => {\n  const { title } = props;\n  return (\n    <AppBar position='static' color='primary'>\n      <Toolbar>\n        <Typography variant='h6'>{title}</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport {\n  Container,\n  Paper,\n  Grid,\n  makeStyles,\n  createStyles,\n  Theme,\n  Button,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { Link } from 'react-router-dom';\n\nimport '../../App.css';\n\nexport interface IHomeProps {\n  title: string;\n  description: string;\n}\n\nconst projectListStyle = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }),\n);\n\nconst Home = (props: IHomeProps) => {\n  const { title } = props;\n  const { description } = props;\n  const classes = projectListStyle();\n  return (\n    <Container fixed>\n      <br />\n      <Alert severity='error'>This Website still under construction!</Alert>\n      <h1 className='text-center'>{title}</h1>\n      <p className='text-center'>{description}</p>\n      <br />\n\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <Paper elevation={1} className={classes.paper}>\n              <Button>\n                <span className='text-capitalize'>\n                  Simple Point of Sales App\n                </span>\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <Paper elevation={1} className={classes.paper}>\n              <Link to='/chat'>\n                <Button>\n                  <span className='text-capitalize'>Simple Chat App</span>\n                </Button>\n              </Link>\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <Paper elevation={1} className={classes.paper}>\n              <Button>\n                <span className='text-capitalize'>Simple Absence App</span>\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n        {/* newlines */}\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <Paper elevation={1} className={classes.paper}>\n              <Button>\n                <span className='text-capitalize'>React JS Basic Setup</span>\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { Component } from 'react';\nimport './Chat.css';\nimport '../../App.css';\n\nimport {\n  Container,\n  TextField,\n  Button,\n  Grid,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { Form, Field } from 'react-final-form';\nimport socketIOClient from 'socket.io-client';\nimport moment from 'moment';\n\ninterface IChatHistory {\n  id: number;\n  message: string;\n  sent: moment.Moment;\n  userId: string;\n}\n\ntype ChatState = {\n  chatHistory: IChatHistory[];\n  count: number;\n  userId: string;\n};\n\nexport default class Chat extends Component<{}, ChatState> {\n  socket = socketIOClient('http://localhost:3001');\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      chatHistory: [],\n      count: 1,\n      userId: `USER-${Math.floor(100000 + Math.random() * 900000)}`,\n    };\n\n    const { userId } = this.state;\n    console.log(userId);\n  }\n\n  componentDidMount() {\n    this.socket.on('chat message', data => {\n      const { chatHistory } = this.state;\n      let { count } = this.state;\n      count += 1;\n      chatHistory.push({\n        id: data.id,\n        message: data.message,\n        sent: data.sent,\n        userId: data.userId,\n      });\n\n      this.setState({\n        chatHistory,\n        count,\n      });\n    });\n  }\n\n  onSubmit(values) {\n    const mr = Math.floor(100000 + Math.random() * 900000);\n    const { userId } = this.state;\n    const { count } = this.state;\n    const ch = {\n      id: count + mr,\n      message: values.message,\n      sent: moment(moment(), 'YYYY-MM-DDTHH:mm'),\n      userId,\n    };\n\n    this.socket.emit('chat message', ch);\n  }\n\n  decideUI(item: IChatHistory) {\n    const { userId } = this.state;\n    if (item.userId === userId) {\n      return (\n        <Paper\n          key={item.id}\n          style={{ marginBottom: 10, backgroundColor: '#4caf5073' }}\n          variant='outlined'\n        >\n          <Grid container wrap='wrap' spacing={1} style={{ padding: 10 }}>\n            <Grid item xs={12} style={{ paddingTop: 0, paddingBottom: 0 }}>\n              <Typography align='right'>\n                <small>{item.userId}</small>\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography align='right'>{item.message}</Typography>\n            </Grid>\n            <Grid item xs={12} style={{ paddingTop: 0, paddingBottom: 0 }}>\n              <Typography align='right'>\n                <small>{moment(item.sent).format('DD/MM/YY HH:mm')}</small>\n              </Typography>\n            </Grid>\n          </Grid>\n        </Paper>\n      );\n    }\n\n    return (\n      <Paper\n        key={item.id}\n        style={{ marginBottom: 10, backgroundColor: '#9e9e9e54' }}\n        variant='outlined'\n      >\n        <Grid container wrap='wrap' spacing={1} style={{ padding: 10 }}>\n          <Grid item xs={12} style={{ paddingTop: 0, paddingBottom: 0 }}>\n            <Typography align='left'>\n              <small>{item.userId}</small>\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography align='left'>{item.message}</Typography>\n          </Grid>\n          <Grid item xs={12} style={{ paddingTop: 0, paddingBottom: 0 }}>\n            <Typography align='left'>\n              <small>{moment(item.sent).format('DD/MM/YY HH:mm')}</small>\n            </Typography>\n          </Grid>\n        </Grid>\n      </Paper>\n    );\n  }\n\n  render() {\n    const { chatHistory } = this.state;\n\n    return (\n      <Container fixed style={{ marginTop: 20 }}>\n        {chatHistory.map(item => this.decideUI(item))}\n\n        <div className='type-message-container'>\n          <div style={{ width: '90%', marginBottom: 10, marginTop: 10 }}>\n            <Form\n              onSubmit={this.onSubmit}\n              initialValues={{ message: '' }}\n              render={({\n                handleSubmit,\n                form,\n                submitting,\n                pristine,\n                values,\n              }) => (\n                <form onSubmit={handleSubmit}>\n                  <Grid container spacing={1}>\n                    <Grid item xs={11}>\n                      <Field name='message' component='input' type='text'>\n                        {messageFieldProps => (\n                          <TextField\n                            id='outlined-basic'\n                            label='Type message'\n                            variant='outlined'\n                            fullWidth\n                            name={messageFieldProps.input.name}\n                            type={messageFieldProps.input.type}\n                            onChange={messageFieldProps.input.onChange}\n                          />\n                        )}\n                      </Field>\n                    </Grid>\n                    <Grid item xs={1}>\n                      <div className='send-button-container'>\n                        <Button\n                          type='submit'\n                          variant='contained'\n                          color='secondary'\n                          style={{ height: '100%', width: '100%' }}\n                          disabled={submitting || pristine}\n                        >\n                          Send\n                        </Button>\n                      </div>\n                    </Grid>\n                  </Grid>\n                </form>\n              )}\n            />\n          </div>\n        </div>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Header from './shared/layout/Header';\nimport Home from './modules/home/Home';\nimport Chat from './modules/chat/Chat';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <Header title='TEFANHAETAMI' />\n        <Switch>\n          <Route path='/chat'>\n            <Chat />\n          </Route>\n          <Route path='/'>\n            <Home\n              title='Hello People!'\n              description='This website is under construction.'\n            />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}