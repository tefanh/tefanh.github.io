{"version":3,"sources":["shared/layout/Header.tsx","modules/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","title","AppBar","position","color","Toolbar","Typography","variant","projectListStyle","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","Home","description","classes","Container","fixed","Alert","severity","className","Grid","container","item","xs","Paper","elevation","Button","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAkBeA,EAXA,SAACC,GAAyB,IAC/BC,EAAUD,EAAVC,MACR,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC9B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAAMN,M,wDCO5BO,EAAmBC,aAAW,SAACC,GAAD,OAClCC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASL,EAAMM,QAAQ,GACvBC,UAAW,SACXb,MAAOM,EAAMQ,QAAQC,KAAKC,gBA4DjBC,EAvDF,SAACrB,GAAuB,IAC3BC,EAAUD,EAAVC,MACAqB,EAAgBtB,EAAhBsB,YACFC,EAAUf,IAChB,OACE,kBAACgB,EAAA,EAAD,CAAWC,OAAK,GACd,6BACA,kBAACC,EAAA,EAAD,CAAOC,SAAS,SAAhB,0CACA,wBAAIC,UAAU,eAAe3B,GAC7B,uBAAG2B,UAAU,eAAeN,GAC5B,6BACA,wBAAIM,UAAU,eAAd,gCACA,6BAEA,yBAAKA,UAAWL,EAAQX,MACtB,kBAACiB,EAAA,EAAD,CAAMC,WAAS,EAACd,QAAS,GACvB,kBAACa,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGN,UAAWL,EAAQT,OACtC,kBAACqB,EAAA,EAAD,KACE,0BAAMP,UAAU,mBAAhB,gCAMN,kBAACC,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGN,UAAWL,EAAQT,OACtC,kBAACqB,EAAA,EAAD,KACE,0BAAMP,UAAU,mBAAhB,sBAIN,kBAACC,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGN,UAAWL,EAAQT,OACtC,kBAACqB,EAAA,EAAD,KACE,0BAAMP,UAAU,mBAAhB,0BAMR,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACd,QAAS,GACvB,kBAACa,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACX,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGN,UAAWL,EAAQT,OACtC,kBAACqB,EAAA,EAAD,KACE,0BAAMP,UAAU,mBAAhB,+BCtDDQ,EAhBO,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQnC,MAAM,iBACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,KAAK,KACV,kBAAC,EAAD,CACEpC,MAAM,gBACNqB,YAAY,4CCHJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0f14d181.chunk.js","sourcesContent":["import React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nexport interface IHeaderProps {\n  title: string;\n}\n\nconst Header = (props: IHeaderProps) => {\n  const { title } = props;\n  return (\n    <AppBar position='static' color='primary'>\n      <Toolbar>\n        <Typography variant='h6'>{title}</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport {\n  Container,\n  Paper,\n  Grid,\n  makeStyles,\n  createStyles,\n  Theme,\n  Button,\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\n\nimport '../../App.css';\n\nexport interface IHomeProps {\n  title: string;\n  description: string;\n}\n\nconst projectListStyle = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }),\n);\n\nconst Home = (props: IHomeProps) => {\n  const { title } = props;\n  const { description } = props;\n  const classes = projectListStyle();\n  return (\n    <Container fixed>\n      <br />\n      <Alert severity='error'>This Website still under construction!</Alert>\n      <h1 className='text-center'>{title}</h1>\n      <p className='text-center'>{description}</p>\n      <br />\n      <h2 className='text-center'>Here are some of my projects</h2>\n      <br />\n\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <Paper elevation={1} className={classes.paper}>\n              <Button>\n                <span className='text-capitalize'>\n                  Simple Point of Sales App\n                </span>\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <Paper elevation={1} className={classes.paper}>\n              <Button>\n                <span className='text-capitalize'>Simple Chat App</span>\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs>\n            <Paper elevation={1} className={classes.paper}>\n              <Button>\n                <span className='text-capitalize'>Simple Absence App</span>\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n        {/* newlines */}\n        <Grid container spacing={3}>\n          <Grid item xs>\n            <Paper elevation={1} className={classes.paper}>\n              <Button>\n                <span className='text-capitalize'>React JS Basic Setup</span>\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Header from './shared/layout/Header';\nimport Home from './modules/home/Home';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Header title='TEFANHAETAMI' />\n      <Switch>\n        <Route path='/'>\n          <Home\n            title='Hello People!'\n            description='This website is under construction.'\n          />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}